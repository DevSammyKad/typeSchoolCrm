generator client {
  provider   = "prisma-client-js"
  engineType = "accelerate"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model Lead {
  id              String       @id @default(uuid())
  leadName        String
  leadEmail       String
  leadPhoneNumber String
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  leadStatus      LeadStatus   @default(NEW)
  leadAge         Int?
  isFavorite      Boolean?     @default(false)
  note            String?
  leadSource      LeadSource   @default(FACEBOOK)
  organizationId  String
  organization    Organization @relation(fields: [organizationId], references: [id])
}

model Organization {
  id                  String    @id @default(uuid())
  subdomain           String    @unique
  organizationName    String
  organizationPanCard String    @unique
  organizationMail    String    @unique
  organizationType    String
  organizationWebsite String?
  // revenue             Int
  isActive            String?
  leads               Lead[]
  grades              Grade[]
  students            Student[]
  users               User[]
  holidays            Holiday[]
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  notices             Notice[]
  Subject             Subject[]
  Section             Section[]
}

model Notice {
  id             String       @id @default(uuid())
  title          String
  description    String
  type           NoticeType // e.g., Announcement or Event
  date           DateTime // For events, this can be the event date
  organizationId String
  tags           String[]
  global         Boolean      @default(false)
  // attachments json
  organization   Organization @relation(fields: [organizationId], references: [id])
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

model Holiday {
  id             Int          @id @default(autoincrement())
  name           String
  description    String?
  date           DateTime
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id])
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

model User {
  id             String       @id @default(cuid())
  firstName      String
  lastName       String
  email          String       @unique
  profileImage   String
  role           Role         @default(STUDENT)
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

model Fee {
  id          String      @id @default(cuid())
  totalFee    Float
  paidAmount  Float       @default(0)
  dueDate     DateTime
  status      FeeStatus   @default(UNPAID)
  studentId   String
  student     Student     @relation(fields: [studentId], references: [id])
  categoryId  String
  feecategory FeeCategory @relation(fields: [categoryId], references: [id])
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model FeeCategory {
  id          String   @id @default(cuid())
  name        String // e.g., "Yearly Fee", "Exam Fee", "Lab Fee", etc.
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  fees        Fee[]
}

model Student {
  id                 String              @id @default(uuid())
  firstName          String
  lastName           String
  profileImage       String?
  email              String?
  gender             Gender?
  age                Int
  address            String
  phoneNumber        String
  parentContact      String?
  fees               Fee[]
  organizationId     String
  section            Section?            @relation(fields: [sectionId], references: [id])
  sectionId          String?
  gradeId            String
  grade              Grade               @relation(fields: [gradeId], references: [id])
  organization       Organization        @relation(fields: [organizationId], references: [id])
  student_attendance StudentAttendance[]
  marks              Mark[]
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt

  @@unique([id, organizationId])
}

model Subject {
  id             String       @id @default(cuid())
  name           String
  organizationId String
  gradeId        String
  organization   Organization @relation(fields: [organizationId], references: [id])
  grade          Grade        @relation(fields: [gradeId], references: [id])
  marks          Mark[]
}

model Mark {
  id        String   @id @default(cuid())
  marks     Int
  studentId String
  subjectId String
  student   Student  @relation(fields: [studentId], references: [id])
  subject   Subject  @relation(fields: [subjectId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([studentId, subjectId]) // A student should have one mark per subject
}

model Grade {
  id             String       @id @default(cuid())
  grade          String
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id])
  students       Student[]
  subjects       Subject[]
  section        Section[]
}

model Section {
  id             String       @id @default(cuid())
  name           String // e.g., "A", "B", "C"
  gradeId        String
  organizationId String
  grade          Grade        @relation(fields: [gradeId], references: [id])
  organization   Organization @relation(fields: [organizationId], references: [id])
  students       Student[] // Students in this section
}

model StudentAttendance {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  studentId String
  present   Boolean  @default(false)
  day       Int
  month     Int
  year      Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  student   Student  @relation(fields: [studentId], references: [id])

  @@unique([studentId, day, month, year])
}

enum Role {
  ADMIN
  TEACHER
  STUDENT
}

enum FeeStatus {
  PAID
  UNPAID
  OVERDUE
}

enum LeadStatus {
  NEW
  CONVERTED
  CONTACTED
  FOLLOW_UP
  MISSED
  CLOSED
}

enum LeadSource {
  FACEBOOK
  GOOGLE_ADS
  LINKEDIN
  TWITTER
  INSTAGRAM
  REFERRAL
  WEBSITE
  EMAIL_CAMPAIGN
  EVENTS
  COLD_CALL
}

enum NoticeType {
  ANNOUNCEMENT
  EVENT
  PENDING_FEES
}

enum Gender {
  MALE
  FEMALE
  OTHER
}
